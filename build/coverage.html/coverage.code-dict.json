{"/home/travis/build/npmtest/node-npmtest-raccoon/test.js":"/* istanbul instrument in package npmtest_raccoon */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-raccoon/lib.npmtest_raccoon.js":"/* istanbul instrument in package npmtest_raccoon */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_raccoon = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_raccoon = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-raccoon/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-raccoon && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_raccoon */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_raccoon\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_raccoon.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_raccoon.rollup.js'] =\n            local.assetsDict['/assets.npmtest_raccoon.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_raccoon.__dirname + '/lib.npmtest_raccoon.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-raccoon/node_modules/raccoon/index.js":"module.exports = require('./lib/raccoon');\n","/home/travis/build/npmtest/node-npmtest-raccoon/node_modules/raccoon/lib/raccoon.js":"\nconst config = require('./config.js'),\n  algo = require('./algorithms.js'),\n  input = require('./input.js'),\n  stat = require('./stat.js');\n\nclass Raccoon {\n  constructor(args) {\n  }\n}\n\nconst inputProtoMethods = {\n  liked,\n  disliked,\n  unliked,\n  undisliked,\n  updateSequence\n} = input;\n\nconst statProtoMethods = {\n  recommendFor,\n  bestRated,\n  worstRated,\n  bestRatedWithScores,\n  mostLiked,\n  mostDisliked,\n  usersWhoLikedAlsoLiked,\n  mostSimilarUsers,\n  leastSimilarUsers,\n  likedBy,\n  likedCount,\n  dislikedBy,\n  dislikedCount,\n  allLikedFor,\n  allDislikedFor,\n  allWatchedFor\n} = stat;\n\nconst recProtoMethods = {\n  predictFor: algo.predictFor\n} = algo;\n\nRaccoon.prototype = Object.assign(Raccoon.prototype, { config, stat },\n  inputProtoMethods, statProtoMethods, recProtoMethods);\n\nmodule.exports = exports = new Raccoon();\n","/home/travis/build/npmtest/node-npmtest-raccoon/node_modules/raccoon/lib/config.js":"\nclass Config {\n  constructor(args) {\n    this.nearestNeighbors = 5;\n    this.className = 'movie';\n    this.numOfRecsStore = 30;\n    this.factorLeastSimilarLeastLiked = false;\n    this.redisUrl = process.env.RACCOON_REDIS_URL || '127.0.0.1';\n    this.redisPort = process.env.RACCOON_REDIS_PORT || 6379;\n    this.redisAuth = process.env.RACCOON_REDIS_AUTH || '';\n  }\n}\n\nmodule.exports = exports = new Config();\n","/home/travis/build/npmtest/node-npmtest-raccoon/node_modules/raccoon/lib/algorithms.js":"\nconst async = require('async'),\n  config = require('./config.js'),\n  _ = require('underscore'),\n  Key = require('./key');\n\n// the jaccard coefficient outputs an objective measurement of the similarity between two objects. in this case, two users. the coefficient\n// is the result of summing the two users likes/dislikes incommon then summing they're likes/dislikes that they disagree on. this sum is\n// then divided by the number of items they both reviewed.\nconst jaccardCoefficient = function(userId1, userId2, callback){\n  let similarity = 0,\n    finalJaccard = 0,\n    ratedInCommon = 0;\n\n  const user1LikedSet = Key.userLikedSet(userId1),\n    user1DislikedSet = Key.userDislikedSet(userId1),\n    user2LikedSet = Key.userLikedSet(userId2),\n    user2DislikedSet = Key.userDislikedSet(userId2);\n\n  // retrieving a set of the users likes incommon\n  client.sinter(user1LikedSet,user2LikedSet, function(err, results1){\n    // retrieving a set of the users dislike incommon\n    client.sinter(user1DislikedSet,user2DislikedSet, function(err, results2){\n      // retrieving a set of the users like and dislikes that they disagree on\n      client.sinter(user1LikedSet,user2DislikedSet, function(err, results3){\n        // retrieving a set of the users like and dislikes that they disagree on\n        client.sinter(user1DislikedSet,user2LikedSet, function(err, results4){\n          // calculating the sum of the similarities minus the sum of the disagreements\n          similarity = (results1.length+results2.length-results3.length-results4.length);\n          // calculating the number of movies rated incommon\n          ratedInCommon = (results1.length+results2.length+results3.length+results4.length);\n          // calculating the the modified jaccard score. similarity / num of comparisons made incommon\n          finalJaccardScore = similarity / ratedInCommon;\n          // calling the callback function passed to jaccard with the new score\n          callback(finalJaccardScore);\n        });\n      });\n    });\n  });\n};\n\n// this function updates the similarity for one user versus all others. at scale this probably needs to be refactored to compare a user\n// against clusters of users instead of against all. every comparison will be a value between -1 and 1 representing simliarity.\n// -1 is exact opposite, 1 is exactly the same.\nexports.updateSimilarityFor = function(userId, cb){\n  // turning the userId into a string. depending on the db they might send an object, in which it won't compare properly when comparing\n  // to other users\n  userId = String(userId);\n  // initializing variables\n  let userRatedItemIds, itemLiked, itemDisliked, itemLikeDislikeKeys;\n  // setting the redis key for the user's similarity set\n  const similarityZSet = Key.similarityZSet(userId);\n  // creating a combined set with the all of a users likes and dislikes\n  client.sunion(Key.userLikedSet(userId), Key.userDislikedSet(userId), function(err, userRatedItemIds){\n    // if they have rated anything\n    if (userRatedItemIds.length > 0){\n      // creating a list of redis keys to look up all of the likes and dislikes for a given set of items\n      itemLikeDislikeKeys = _.map(userRatedItemIds, function(itemId, key){\n        // key for that item being liked\n        itemLiked = Key.itemLikedBySet(itemId);\n        // key for the item being disliked\n        itemDisliked = Key.itemDislikedBySet(itemId);\n        // returning an array of those keys\n        return [itemLiked, itemDisliked];\n      });\n    }\n    // flattening the array of all the likes/dislikes for the items a user rated\n    itemLikeDislikeKeys = _.flatten(itemLikeDislikeKeys);\n    // builds one set of all the users who liked and disliked the same items\n    client.sunion(itemLikeDislikeKeys, function(err, otherUserIdsWhoRated){\n      // running in async parallel, going through the array of user ids who also rated the same things\n      async.each(otherUserIdsWhoRated,\n        // running a function on each item in the list\n        function(otherUserId, callback){\n          // if there is only one other user or the other user is the same user\n          if (otherUserIdsWhoRated.length === 1 || userId === otherUserId){\n            // then call the callback and exciting the similarity check\n            callback();\n          }\n          // if the userid is not the same as the user\n          if (userId !== otherUserId){\n            // calculate the jaccard coefficient for similarity. it will return a value between -1 and 1 showing the two users\n            // similarity\n            jaccardCoefficient(userId, otherUserId, function(result) {\n              // with the returned similarity score, add it to a sorted set named above\n              client.zadd(similarityZSet, result, otherUserId, function(err){\n                // call the async callback function once finished to indicate that the process is finished\n                callback();\n              });\n            });\n          }\n        },\n        // once all the async comparisons have been made, call the final callback based to the original function\n        function(err){\n          cb();\n        }\n      );\n    });\n  });\n};\n\nexports.predictFor = function(userId, itemId){\n  userId = String(userId);\n  itemId = String(itemId);\n  let finalSimilaritySum = 0.0;\n  let prediction = 0.0;\n  const similarityZSet = Key.similarityZSet(userId);\n  const likedBySet = Key.itemLikedBySet(itemId);\n  const dislikedBySet = Key.itemDislikedBySet(itemId);\n\n  return new Promise((resolve, reject) => {\n    exports.similaritySum(similarityZSet, likedBySet, function(result1){\n      exports.similaritySum(similarityZSet, dislikedBySet, function(result2){\n        finalSimilaritySum = result1 - result2;\n        client.scard(likedBySet, function(err, likedByCount){\n          client.scard(dislikedBySet, function(err, dislikedByCount){\n            prediction = finalSimilaritySum / parseFloat(likedByCount + dislikedByCount);\n            if (isFinite(prediction)){\n              resolve(prediction);\n            } else {\n              resolve(0.0);\n            }\n          });\n        });\n      });\n    });\n  });\n};\n\nexports.similaritySum = function(simSet, compSet, cb){\n  let similarSum = 0.0;\n  client.smembers(compSet, function(err, userIds){\n    async.each(userIds,\n      function(userId, callback){\n        client.zscore(simSet, userId, function(err, zScore){\n          const newScore = parseFloat(zScore) || 0.0;\n          similarSum += newScore;\n          callback();\n        });\n      },\n      function(err){\n        cb(similarSum);\n      }\n    );\n  });\n};\n\n// after the similarity is updated for the user, the users recommendations are updated\n// recommendations consist of a sorted set in Redis. the values of this set are\n// names of the items and the score is what raccoon estimates that user would rate it\n// the values are generally not going to be -1 or 1 exactly because there isn't 100%\n// certainty.\nexports.updateRecommendationsFor = function(userId, cb){\n  // turning the user input into a string so it can be compared properly\n  userId = String(userId);\n  // creating two blank arrays\n  let setsToUnion = [];\n  let scoreMap = [];\n  // initializing the redis keys for temp sets, the similarity set and the recommended set\n  const tempAllLikedSet = Key.tempAllLikedSet(userId);\n  const similarityZSet = Key.similarityZSet(userId);\n  const recommendedZSet = Key.recommendedZSet(userId);\n  // returns an array of the users that are most similar within k nearest neighbors\n  client.zrevrange(similarityZSet, 0, config.nearestNeighbors-1, function(err, mostSimilarUserIds){\n    // returns an array of the users that are least simimilar within k nearest neighbors\n    client.zrange(similarityZSet, 0, config.nearestNeighbors-1, function(err, leastSimilarUserIds){\n      // iterate through the user ids to create the redis keys for all those users likes\n      _.each(mostSimilarUserIds, function(usrId, key){\n        setsToUnion.push(Key.userLikedSet(usrId));\n      });\n      // if you want to factor in the least similar least likes, you change this in config\n      // left it off because it was recommending items that every disliked universally\n      _.each(leastSimilarUserIds, function(usrId, key){\n        setsToUnion.push(Key.userDislikedSet(usrId));\n      });\n      // if there is at least one set in the array, continue\n      if (setsToUnion.length > 0){\n        setsToUnion.unshift(tempAllLikedSet);\n        client.sunionstore(setsToUnion, function(err) {\n          // using the new array of all the items that were liked by people similar and disliked by people opposite, create a new set with all the\n          // items that the current user hasn't already rated\n          client.sdiff(tempAllLikedSet, Key.userLikedSet(userId), Key.userDislikedSet(userId), function(err, notYetRatedItems){\n            // with the array of items that user has not yet rated, iterate through all of them and predict what the current user would rate it\n            async.each(notYetRatedItems,\n              function(itemId, callback){\n                exports.predictFor(userId, itemId).then((score) => {\n                  // push the score and item to the score map array.\n                  scoreMap.push([score, itemId]);\n                  callback();\n                });\n              },\n              // using score map which is an array of what the current user would rate all the unrated items,\n              // add them to that users sorted recommended set\n              function(err){\n                client.del(recommendedZSet, function(err){\n                  async.each(scoreMap,\n                    function(scorePair, callback){\n                      client.zadd(recommendedZSet, scorePair[0], scorePair[1], function(err){\n                        callback();\n                      });\n                    },\n                    // after all the additions have been made to the recommended set,\n                    function(err){\n                      client.del(tempAllLikedSet, function(err){\n                        client.zcard(recommendedZSet, function(err, length){\n                          client.zremrangebyrank(recommendedZSet, 0, length-config.numOfRecsStore-1, function(err){\n                            cb();\n                          });\n                        });\n                      });\n                    }\n                  );\n                });\n              }\n            );\n          });\n        });\n      } else {\n        cb();\n      }\n    });\n  });\n};\n\n// the wilson score is a proxy for 'best rated'. it represents the best finding the best ratio of likes and also eliminating\n// outliers. the wilson score is a value between 0 and 1.\nexports.updateWilsonScore = function(itemId, callback){\n  // creating the redis keys for scoreboard and to get the items liked and disliked sets\n  const scoreboard = Key.scoreboardZSet();\n  const likedBySet = Key.itemLikedBySet(itemId);\n  const dislikedBySet = Key.itemDislikedBySet(itemId);\n  // used for a confidence interval of 95%\n  const z = 1.96;\n  // initializing variables to calculate wilson score\n  let n, pOS, score;\n  // getting the liked count for the item\n  client.scard(likedBySet, function(err, likedResults){\n    // getting the disliked count for the item\n    client.scard(dislikedBySet, function(err, dislikedResults){\n      // if the total count is greater than zero\n      if ((likedResults + dislikedResults) > 0){\n        // set n to the sum of the total ratings for the item\n        n = likedResults + dislikedResults;\n        // set pOS to the num of liked results divided by the number rated\n        // pOS represents the proportion of successes or likes in this case\n        pOS = likedResults / parseFloat(n);\n        // try the following equation\n        try {\n          // calculating the wilson score\n          // http://www.evanmiller.org/how-not-to-sort-by-average-rating.html\n          score = (pOS + z*z/(2*n) - z*Math.sqrt((pOS*(1-pOS)+z*z/(4*n))/n))/(1+z*z/n);\n        } catch (e) {\n          // if an error occurs, set the score to 0.0 and console log the error message.\n          console.log(e.name + \": \" + e.message);\n          score = 0.0;\n        }\n        // add that score to the overall scoreboard. if that item already exists, the score will be updated.\n        client.zadd(scoreboard, score, itemId, function(err){\n          // call the final callback sent to the initial function.\n          callback();\n        });\n      }\n    });\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-raccoon/node_modules/raccoon/lib/key.js":"\nconst config = require('./config.js');\n\nconst CLASSNAME = config.className,\n  USER = 'user',\n  ITEM = 'item';\n\nclass Key {\n  constructor() {\n    this.key = '';\n    this.keyArr = [];\n  }\n\n  joinKey() {\n    this.key = [CLASSNAME].concat(this.keyArr).join(':');\n    return this.key;\n  }\n\n  userLikedSet(userId) {\n    this.keyArr = [USER, userId, 'liked'];\n    return this.joinKey();\n  }\n\n  userDislikedSet(userId) {\n    this.keyArr = [USER, userId, 'disliked'];\n    return this.joinKey();\n  }\n\n  itemLikedBySet(itemId) {\n    this.keyArr = [ITEM, itemId, 'liked'];\n    return this.joinKey();\n  }\n\n  itemDislikedBySet(itemId) {\n    this.keyArr = [ITEM, itemId, 'disliked'];\n    return this.joinKey();\n  }\n\n  mostLiked() {\n    this.keyArr = ['mostLiked'];\n    return this.joinKey();\n  }\n\n  mostDisliked() {\n    this.keyArr = ['mostDisliked'];\n    return this.joinKey();\n  }\n\n  recommendedZSet(userId) {\n    this.keyArr = [USER, userId, 'recommendedZSet'];\n    return this.joinKey();\n  }\n\n  scoreboardZSet() {\n    this.keyArr = ['scoreboard'];\n    return this.joinKey();\n  }\n\n  similarityZSet(userId) {\n    this.keyArr = [USER, userId, 'similarityZSet'];\n    return this.joinKey();\n  }\n\n  tempAllLikedSet(userId) {\n    this.keyArr = [USER, userId, 'tempAllLikedSet'];\n    return this.joinKey();\n  }\n}\n\nmodule.exports = exports = new Key();\n","/home/travis/build/npmtest/node-npmtest-raccoon/node_modules/raccoon/lib/input.js":"\nconst config = require('./config.js'),\n  algo = require('./algorithms.js'),\n  async = require('async'),\n  Key = require('./key');\n\nconst updateSequence = function(userId, itemId, options = {}){\n  let updateWilson = true;\n  if ('updateWilson' in options) {\n    updateWilson = options.updateWilson ? true : false;\n  }\n\n  return new Promise((resolve, reject) => {\n    algo.updateSimilarityFor(userId, function(){\n      async.parallel([\n        function(cb){\n          algo.updateWilsonScore(itemId, function(){\n            cb(null);\n          });\n        },\n        function(cb){\n          algo.updateRecommendationsFor(userId, function(){\n            cb(null);\n          });\n        }\n      ],\n      function(err){\n        if (err){console.log('error', err);}\n        resolve();\n      });\n    });\n  });\n};\n\nconst changeRating = function(userId, itemId, options){\n  let updateRecommendations = true;\n  if ('updateRecs' in options) {\n    updateRecommendations = options.updateRecs ? true : false;\n  }\n\n  const removeRating = options.removeRating ? true : false;\n\n  const feelingItemSet = options.liked ? Key.itemLikedBySet(itemId) : Key.itemDislikedBySet(itemId);\n  const feelingUserSet = options.liked ? Key.userLikedSet(userId) : Key.userDislikedSet(userId);\n  const mostFeelingSet = options.liked ? Key.mostLiked() : Key.mostDisliked();\n\n  return new Promise((resolve, reject) => {\n    Promise.resolve().then(() => {\n      // check if the rating is already stored\n      return client.sismemberAsync(feelingItemSet, userId);\n    }).then((result) => {\n      // only increment the most feeling set if it doesn't already exist\n      if (result === 0 && !removeRating) {\n        client.zincrby(mostFeelingSet, 1, itemId);\n      } else if (result > 0 && removeRating) {\n        client.zincrby(mostFeelingSet, -1, itemId);\n      }\n      return removeRating ? client.sremAsync(feelingUserSet, itemId) :\n        client.saddAsync(feelingUserSet, itemId);\n    }).then(() => {\n      return removeRating ? client.sremAsync(feelingItemSet, userId) :\n        client.saddAsync(feelingItemSet, userId);\n    }).then(() => {\n      return client.sismemberAsync(feelingItemSet, userId);\n    }).then((result) => {\n      // only fire update sequence if requested by the user\n      // and there are results to compare\n      if (updateRecommendations && result > 0) {\n        updateSequence(userId, itemId).then(() => {\n          resolve();\n        });\n      } else {\n        resolve();\n      }\n    });\n  });\n};\n\nconst liked = function(userId, itemId, options = {}){\n  options.liked = true;\n  return changeRating(userId, itemId, options);\n};\n\nconst disliked = function(userId, itemId, options = {}){\n  options.liked = false;\n  return changeRating(userId, itemId, options);\n};\n\nconst unliked = function(userId, itemId, options = {}){\n  options.liked = true;\n  options.removeRating = true;\n  return changeRating(userId, itemId, options);\n};\n\nconst undisliked = function(userId, itemId, options = {}){\n  options.liked = false;\n  options.removeRating = true;\n  return changeRating(userId, itemId, options);\n};\n\nconst input = {\n  liked,\n  disliked,\n  unliked,\n  undisliked,\n  updateSequence\n};\n\nmodule.exports = input;\n","/home/travis/build/npmtest/node-npmtest-raccoon/node_modules/raccoon/lib/stat.js":"\nconst config = require('./config.js'),\n  client = require('./client.js'),\n  Key = require('./key');\n\nconst stat = {\n  recommendFor: function(userId, numberOfRecs){\n    return new Promise((resolve, reject) => {\n      client.zrevrangeAsync(Key.recommendedZSet(userId), 0, numberOfRecs).then((results) => {\n        resolve(results);\n      });\n    });\n  },\n  bestRated: function(){\n    return new Promise((resolve, reject) => {\n      client.zrevrangeAsync(Key.scoreboardZSet(), 0, -1).then((results) => {\n        resolve(results);\n      });\n    });\n  },\n  worstRated: function(){\n    return new Promise((resolve, reject) => {\n      client.zrangeAsync(Key.scoreboardZSet(), 0, -1).then((results) => {\n        resolve(results);\n      });\n    });\n  },\n  bestRatedWithScores: function(numOfRatings){\n    return new Promise((resolve, reject) => {\n      client.zrevrangeAsync(Key.scoreboardZSet(), 0, numOfRatings, 'withscores').then((results) => {\n        resolve(results);\n      });\n    });\n  },\n  mostLiked: function(){\n    return new Promise((resolve, reject) => {\n      client.zrevrangeAsync(Key.mostLiked(), 0, -1).then((results) => {\n        resolve(results);\n      });\n    });\n  },\n  mostDisliked: function(){\n    return new Promise((resolve, reject) => {\n      client.zrevrangeAsync(Key.mostDisliked(), 0, -1).then((results) => {\n        resolve(results);\n      });\n    });\n  },\n  usersWhoLikedAlsoLiked: function(itemId){\n  },\n  mostSimilarUsers: function(userId){\n    return new Promise((resolve, reject) => {\n      client.zrevrangeAsync(Key.similarityZSet(userId), 0, -1).then((results) => {\n        resolve(results);\n      });\n    });\n  },\n  leastSimilarUsers: function(userId){\n    return new Promise((resolve, reject) => {\n      client.zrangeAsync(Key.similarityZSet(userId), 0, -1).then((results) => {\n        resolve(results);\n      });\n    });\n  },\n  likedBy: function(itemId){\n    return new Promise((resolve, reject) => {\n      client.smembersAsync(Key.itemLikedBySet(itemId)).then((results) => {\n        resolve(results);\n      });\n    });\n  },\n  likedCount: function(itemId){\n    return new Promise((resolve, reject) => {\n      client.scardAsync(Key.itemLikedBySet(itemId)).then((results) => {\n        resolve(results);\n      });\n    });\n  },\n  dislikedBy: function(itemId){\n    return new Promise((resolve, reject) => {\n      client.smembersAsync(Key.itemDislikedBySet(itemId)).then((results) => {\n        resolve(results);\n      });\n    });\n  },\n  dislikedCount: function(itemId){\n    return new Promise((resolve, reject) => {\n      client.scardAsync(Key.itemDislikedBySet(itemId)).then((results) => {\n        resolve(results);\n      });\n    });\n  },\n  allLikedFor: function(userId){\n    return new Promise((resolve, reject) => {\n      client.smembersAsync(Key.userLikedSet(userId)).then((results) => {\n        resolve(results);\n      });\n    });\n  },\n  allDislikedFor: function(userId){\n    return new Promise((resolve, reject) => {\n      client.smembersAsync(Key.userDislikedSet(userId)).then((results) => {\n        resolve(results);\n      });\n    });\n  },\n  allWatchedFor: function(userId){\n    return new Promise((resolve, reject) => {\n      client.sunionAsync(Key.userLikedSet(userId), Key.userDislikedSet(userId)).then((results) => {\n        resolve(results);\n      });\n    });\n  }\n};\n\nmodule.exports = exports = stat;\n","/home/travis/build/npmtest/node-npmtest-raccoon/node_modules/raccoon/lib/client.js":"\nconst redis = require('redis'),\n  config = require('./config'),\n  bluebird = require('bluebird');\n\nbluebird.promisifyAll(redis.RedisClient.prototype);\n\nclient = redis.createClient(config.redisPort, config.redisUrl);\nif (config.redisAuth){\n  client.auth(config.redisAuth, function (err) {\n   if (err) { throw err; }\n  });\n}\n\nmodule.exports = exports = client;\n","/home/travis/build/npmtest/node-npmtest-raccoon/node_modules/raccoon/Gruntfile.js":"\nvar _ = require('underscore');\n\nmodule.exports = function(grunt) {\n  'use strict';\n\n  var files = {\n    src: 'lib/**/*.js',\n    tests: 'test/**/*.js'\n  };\n\n  // Project configuration.\n  grunt.initConfig({\n    pkg: grunt.file.readJSON('package.json'),\n\n    jshint: {\n      all: [\n        'Gruntfile.js',\n        files.src,\n        files.tests\n      ],\n      options: {\n        esversion: 6,\n        moz: true\n      }\n    },\n    mochacov: {\n      test: {\n        src: [files.tests]\n      }, // Run with the spec testrunner\n      coverage: {\n        src: [files.tests],\n        options: {\n          coveralls: {\n            serviceName: 'travis-ci',\n            repoToken: process.env.COVERALLS_REPO_TOKEN\n          }\n        }\n      },\n      options: {\n        reporter: 'spec',\n        ignoreLeaks: false,\n        files: [files.tests]\n      }\n    },\n    watch: {\n      tests: {\n        files: _.toArray(files),\n        tasks: ['test']\n      }\n    }\n  });\n\n  // On watch events, configure jshint:all to run only on changed file\n  grunt.event.on('watch', function(action, filepath) {\n    grunt.config(['jshint', 'all'], filepath);\n  });\n\n  // Load third-party modules\n  grunt.loadNpmTasks('grunt-contrib-jshint');\n  grunt.loadNpmTasks('grunt-contrib-watch');\n  grunt.loadNpmTasks('grunt-mocha-cov');\n\n  // Tasks\n  // grunt.registerTask('travis', [ 'jshint', 'mochacov:test', 'mochacov:coverage' ]);\n  grunt.registerTask('travis', [ 'jshint:all', 'mochacov:test' ]);\n\n  grunt.registerTask('test', ['jshint:all', 'mochacov:test']);\n\n  // Default task (runs when running `grunt` without arguments)\n  grunt.registerTask('default', ['test']);\n};\n"}